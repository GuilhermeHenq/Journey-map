[{"C:\\Users\\gpere\\Desktop\\journeymapspike-main\\journeymapspike-front\\src\\index.js":"1","C:\\Users\\gpere\\Desktop\\journeymapspike-main\\journeymapspike-front\\src\\components\\NavBar.jsx":"2","C:\\Users\\gpere\\Desktop\\journeymapspike-main\\journeymapspike-front\\src\\components\\Matrix.jsx":"3","C:\\Users\\gpere\\Desktop\\journeymapspike-main\\journeymapspike-front\\src\\components\\EditableRect.jsx":"4","C:\\Users\\gpere\\Desktop\\journeymapspike-main\\journeymapspike-front\\src\\components\\Modal.jsx":"5"},{"size":12616,"mtime":1701822387475,"results":"6","hashOfConfig":"7"},{"size":2405,"mtime":1701366805539,"results":"8","hashOfConfig":"7"},{"size":7683,"mtime":1701797919590,"results":"9","hashOfConfig":"7"},{"size":1048,"mtime":1701368984062,"results":"10","hashOfConfig":"7"},{"size":662,"mtime":1701367887813,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"172clxg",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"19"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"C:\\Users\\gpere\\Desktop\\journeymapspike-main\\journeymapspike-front\\src\\index.js",["31","32","33","34","35","36","37","38","39","40","41"],[],"C:\\Users\\gpere\\Desktop\\journeymapspike-main\\journeymapspike-front\\src\\components\\NavBar.jsx",["42","43","44","45"],[],"import React, { useState } from \"react\";\r\nimport { VscSave, VscSettingsGear } from 'react-icons/vsc';\r\nimport { BiSolidHelpCircle, BiSolidLogIn } from 'react-icons/bi';\r\nimport { GrDocumentConfig } from 'react-icons/gr';\r\nimport { IoIosAddCircle } from \"react-icons/io\";\r\n\r\nconst Navbar = ({ handleSaveClick, showMascote }) => {\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [selectedMap, setSelectedMap] = useState(\"Mapa 1\");\r\n\r\n    const handleMascoteClick = () => {\r\n        console.log(\"Mascote clicado!\");\r\n    };\r\n\r\n    const handleOptionClick = (option) => {\r\n        console.log(`${option} clicado!`);\r\n    };\r\n\r\n    const handleMapChange = (event) => {\r\n        setSelectedMap(event.target.value);\r\n        // mudar o mapa\r\n    };\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <div className=\"logo\" onClick={handleMascoteClick}>\r\n                <img src={process.env.PUBLIC_URL + '/Mascote.svg'} alt=\"Mascote Logo\" className=\"mascoteperso\" />\r\n            </div>\r\n            <div className=\"options\">\r\n                <div className=\"dropdown-container\">\r\n                    <label htmlFor=\"mapDropdown\">Mapa: </label>\r\n                    <select id=\"mapDropdown\" value={selectedMap} onChange={handleMapChange}>\r\n                        <option value=\"Mapa 1\">Mapa 1</option>\r\n                        <option value=\"Mapa 2\">Mapa 2</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"botaosalvar\">\r\n                    <button className=\"arrumarbotao\" id=\"\" onClick={() => { handleSaveClick(); showMascote(); }}>\r\n                        <VscSave className=\"icons2\" />\r\n                        <div className=\"textoarrumar\">Salvar</div>\r\n                    </button>\r\n                </div>\r\n                <button className=\"option-btn\" onClick={() => handleOptionClick(\"Login\")}>\r\n                    <BiSolidLogIn className=\"icons\" />\r\n                </button>\r\n                <button className=\"option-btn\" onClick={() => handleOptionClick(\"Configurações\")}>\r\n                    <VscSettingsGear className=\"icons\" />\r\n                </button>\r\n                <button className=\"option-btn\" onClick={() => handleOptionClick(\"Ajuda\")}>\r\n                    <BiSolidHelpCircle className=\"icons\" />\r\n                </button>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n",[],"C:\\Users\\gpere\\Desktop\\journeymapspike-main\\journeymapspike-front\\src\\components\\Matrix.jsx",["46","47"],[],"import React from \"react\";\r\nimport { Stage, Layer, Rect, Circle, Text, Group } from \"react-konva\";\r\nimport EditableRect from \"./EditableRect\";\r\n\r\nconst Matrix = ({ matrix, activeRect, handleTextSubmit, handleTextChange, setActiveRect, handleDeleteSquare, handleAddSquare, onDragMove, onDragEnd }) => (\r\n    <>\r\n        {matrix.map((row, rowIndex) => (\r\n            row.map((square, colIndex) => (\r\n                <Group key={`square_${square.id}`}>\r\n                    {rowIndex !== 2 ? (\r\n                        <>\r\n                            <EditableRect\r\n                                key={`square_${square.id}`}\r\n                                x={square.x}\r\n                                y={square.y}\r\n                                width={square.width}\r\n                                height={square.height}\r\n                                color={square.color}\r\n                                text={square.text || \"\"}\r\n                                onTextChange={(newText) => handleTextChange(rowIndex, colIndex, newText)}\r\n                                isActive={activeRect === square.id}\r\n                                onActivate={() => setActiveRect(square.id)}\r\n                            />\r\n                            {activeRect === square.id && (\r\n                                <Rect\r\n                                    x={square.x + square.width}\r\n                                    y={square.y}\r\n                                    width={30}\r\n                                    height={30}\r\n                                    fill=\"green\"\r\n                                    opacity={1}\r\n                                    draggable={false}\r\n                                    onClick={() => handleTextSubmit(rowIndex, colIndex)}\r\n                                    onTap={() => handleTextSubmit(rowIndex, colIndex)}\r\n                                    listening={true}\r\n                                    style={{ cursor: 'pointer' }}\r\n                                />\r\n                            )}\r\n                            <Rect\r\n                                x={square.x + square.width - 20}\r\n                                y={square.y}\r\n                                width={20}\r\n                                height={20}\r\n                                fill=\"gray\"\r\n                                opacity={1}\r\n                                draggable={false}\r\n                                onClick={() => handleDeleteSquare(rowIndex, colIndex)}\r\n                                onTap={() => handleDeleteSquare(rowIndex, colIndex)}\r\n                                listening={true}\r\n                                style={{ cursor: 'pointer' }}\r\n                                cornerRadius={3}\r\n                            />\r\n                            <Text\r\n                                x={square.x + square.width - 13}\r\n                                y={square.y + 5}\r\n                                text=\"X\"\r\n                                fontSize={12}\r\n                                fill=\"#fff\"\r\n                                align=\"center\"\r\n                                verticalAlign=\"middle\"\r\n                                listening={false}\r\n                            />\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <Circle\r\n                                x={square.x + 60}\r\n                                y={square.y}\r\n                                radius={10}\r\n                                fill={square.color}\r\n                                opacity={1}\r\n                                draggable={false}\r\n                                listening={true}\r\n                                style={{ cursor: 'pointer' }}\r\n                            />\r\n                            <Rect\r\n                                x={square.x + 100}\r\n                                y={square.y + 20}\r\n                                width={20}\r\n                                height={20}\r\n                                fill=\"gray\"\r\n                                opacity={1}\r\n                                draggable={false}\r\n                                onClick={() => handleDeleteSquare(rowIndex, colIndex)}\r\n                                onTap={() => handleDeleteSquare(rowIndex, colIndex)}\r\n                                listening={true}\r\n                                style={{ cursor: 'pointer' }}\r\n                                cornerRadius={40}\r\n                            />\r\n                            <Text\r\n                                x={square.x + 106}\r\n                                y={square.y + 25}\r\n                                text=\"X\"\r\n                                fontSize={12}\r\n                                fill=\"#fff\"\r\n                                align=\"center\"\r\n                                verticalAlign=\"middle\"\r\n                                listening={false}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </Group>\r\n            ))\r\n        ))}\r\n        {matrix.map((row, rowIndex) => (\r\n            <Group key={`addButtonRow_${rowIndex}`}>\r\n                <Rect\r\n                    x={row.length > 0 ? row[row.length - 1].x + 150 : 30}\r\n                    y={rowIndex * 100 + 80}\r\n                    width={60}\r\n                    height={45}\r\n                    fill={\"gray\"}\r\n                    opacity={1}\r\n                    draggable={false}\r\n                    onClick={() => handleAddSquare(rowIndex)}\r\n                    onTap={() => handleAddSquare(rowIndex)}\r\n                    listening={true}\r\n                    style={{ cursor: 'pointer' }}\r\n                    cornerRadius={10}\r\n                />\r\n                <Text\r\n                    x={row.length > 0 ? row[row.length - 1].x + 165 : 45}\r\n                    y={rowIndex * 100 + 82}\r\n                    text=\"+\"\r\n                    fontSize={50}\r\n                    fill=\"#fff\"\r\n                    align=\"center\"\r\n                    verticalAlign=\"middle\"\r\n                    listening={false}\r\n                />\r\n            </Group>\r\n\r\n        ))}\r\n        {matrix.map((row, rowIndex) => (\r\n            <Group key={`addButtonRow_${rowIndex}`}>\r\n                {row.map((square, colIndex) => (\r\n                    <Group key={`addButton_${square.id}`}>\r\n                        <Rect\r\n                            x={square.x + square.width}\r\n                            y={square.y + 30}\r\n                            width={30}\r\n                            height={30}\r\n                            fill=\"gray\"\r\n                            opacity={1}\r\n                            draggable={false}\r\n                            onClick={() => handleAddSquare(rowIndex, colIndex)}\r\n                            onTap={() => handleAddSquare(rowIndex, colIndex)}\r\n                            listening={true}\r\n                            style={{ cursor: 'pointer' }}\r\n                            cornerRadius={10}\r\n                        />\r\n                        <Text\r\n                            x={square.x + square.width + 5}\r\n                            y={square.y + 34}\r\n                            text=\"+\"\r\n                            fontSize={30}\r\n                            fill=\"#fff\"\r\n                            align=\"center\"\r\n                            verticalAlign=\"middle\"\r\n                            listening={false}\r\n                        />\r\n                    </Group>\r\n                ))}\r\n            </Group>\r\n        ))}\r\n    </>\r\n);\r\n\r\nexport default Matrix;\r\n","C:\\Users\\gpere\\Desktop\\journeymapspike-main\\journeymapspike-front\\src\\components\\EditableRect.jsx",["48"],[],"import React, { useState } from 'react';\r\nimport { Rect, Group } from 'react-konva';\r\nimport Modal from './Modal';\r\n\r\nconst EditableRect = ({ x, y, width, height, color, text, onTextChange, isActive, onActivate }) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    setIsEditing(true);\r\n    onActivate();\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleSaveModal = (newText) => {\r\n    onTextChange(newText);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Rect\r\n        x={x}\r\n        y={y}\r\n        width={width}\r\n        height={height}\r\n        fill={isActive ? 'yellow' : color}\r\n        opacity={1}\r\n        draggable={false}\r\n        onClick={handleClick}\r\n        onTap={handleClick}\r\n        listening={true}\r\n      />\r\n      {isEditing && (\r\n        <Modal\r\n          isOpen={isEditing}\r\n          onClose={handleCloseModal}\r\n          onSave={handleSaveModal}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditableRect;\r\n","C:\\Users\\gpere\\Desktop\\journeymapspike-main\\journeymapspike-front\\src\\components\\Modal.jsx",[],[],{"ruleId":"49","severity":1,"message":"50","line":3,"column":30,"nodeType":"51","messageId":"52","endLine":3,"endColumn":36},{"ruleId":"49","severity":1,"message":"53","line":6,"column":8,"nodeType":"51","messageId":"52","endLine":6,"endColumn":16},{"ruleId":"49","severity":1,"message":"54","line":13,"column":10,"nodeType":"51","messageId":"52","endLine":13,"endColumn":33},{"ruleId":"49","severity":1,"message":"55","line":58,"column":7,"nodeType":"51","messageId":"52","endLine":58,"endColumn":13},{"ruleId":"49","severity":1,"message":"56","line":99,"column":22,"nodeType":"51","messageId":"52","endLine":99,"endColumn":35},{"ruleId":"49","severity":1,"message":"57","line":101,"column":10,"nodeType":"51","messageId":"52","endLine":101,"endColumn":15},{"ruleId":"49","severity":1,"message":"58","line":103,"column":10,"nodeType":"51","messageId":"52","endLine":103,"endColumn":21},{"ruleId":"49","severity":1,"message":"59","line":103,"column":23,"nodeType":"51","messageId":"52","endLine":103,"endColumn":37},{"ruleId":"49","severity":1,"message":"60","line":143,"column":9,"nodeType":"51","messageId":"52","endLine":143,"endColumn":29},{"ruleId":"49","severity":1,"message":"61","line":316,"column":9,"nodeType":"51","messageId":"52","endLine":316,"endColumn":20},{"ruleId":"49","severity":1,"message":"62","line":362,"column":9,"nodeType":"51","messageId":"52","endLine":362,"endColumn":24},{"ruleId":"49","severity":1,"message":"63","line":4,"column":10,"nodeType":"51","messageId":"52","endLine":4,"endColumn":26},{"ruleId":"49","severity":1,"message":"64","line":5,"column":10,"nodeType":"51","messageId":"52","endLine":5,"endColumn":24},{"ruleId":"49","severity":1,"message":"65","line":8,"column":12,"nodeType":"51","messageId":"52","endLine":8,"endColumn":23},{"ruleId":"49","severity":1,"message":"66","line":8,"column":25,"nodeType":"51","messageId":"52","endLine":8,"endColumn":39},{"ruleId":"49","severity":1,"message":"67","line":2,"column":10,"nodeType":"51","messageId":"52","endLine":2,"endColumn":15},{"ruleId":"49","severity":1,"message":"68","line":2,"column":17,"nodeType":"51","messageId":"52","endLine":2,"endColumn":22},{"ruleId":"49","severity":1,"message":"69","line":2,"column":16,"nodeType":"51","messageId":"52","endLine":2,"endColumn":21},"no-unused-vars","'Circle' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'adjustCircleXToInterval' is defined but never used.","'Square' is assigned a value but never used.","'setActiveRect' is assigned a value but never used.","'balls' is assigned a value but never used.","'activePhase' is assigned a value but never used.","'setActivePhase' is assigned a value but never used.","'handleCircleDragMove' is assigned a value but never used.","'showMascote' is assigned a value but never used.","'handleSaveClick' is assigned a value but never used.","'GrDocumentConfig' is defined but never used.","'IoIosAddCircle' is defined but never used.","'activeIndex' is assigned a value but never used.","'setActiveIndex' is assigned a value but never used.","'Stage' is defined but never used.","'Layer' is defined but never used.","'Group' is defined but never used."]